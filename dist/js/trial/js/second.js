!function(t){var e={};function a(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)a.d(s,i,function(e){return t[e]}.bind(null,i));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([,function(t,e,a){"use strict";a.r(e);class s{constructor(){this._canvas=document.querySelector("canvas"),this._rect=this._canvas.getBoundingClientRect(),this._ctx=this._canvas.getContext("2d"),this._editor=document.getElementById("editor-container"),this._baseInnerWidth=1366,this._baseInnerHeight=657,this._baseCanvasWidth=700,this._baseCanvasHeight=500,this.setUpCanvas()}getCanvasValues(){return{canvas:this._canvas,ctx:this._ctx,rect:this._rect}}setUpCanvas(){const t=this._getMargin();this._editor.style.marginLeft=t+"px",innerWidth<=940&&(this._canvas.width=innerWidth-50,this._rect.width=this._canvas.width,this._editor.style.marginLeft="25px",this._editor.style.marginRight="25px")}resizeCanvas(){this.setUpCanvas()}clearCanvas(){this._ctx.clearRect(0,0,this._rect.width,this._rect.height)}_getMargin(){let t=this._baseInnerWidth/innerWidth;this._canvas.width=this._baseCanvasWidth/t,this._canvas.height=this._baseCanvasHeight;return(innerWidth-this._canvas.width-50-100)/2}}const i=new class{constructor(){this._canvasView=new s;const t=this._canvasView.getCanvasValues();this._canvas=t.canvas,this._ctx=t.ctx,this._rect=t.rect,this._setupListeners()}getCanvas(){return this._canvas}drawImage(t){setTimeout(()=>{this._canvasView.clearCanvas();let e=t.getImgData(),a=t.getImgTransform();this._ctx.drawImage(e,a.x,a.y,a.width,a.height)},300)}changeImage(t,e,a,s){s[1],s[2],s[3],s[4];let i=s[0],n=rgbToHsl(...selectedColor),r=0,h=0;for(let t=0;t<i.data.length;t+=4){let s=rgbToHsl(e.data[t],e.data[t+1],e.data[t+2]);if(255==i.data[t]&&255==i.data[t+1]&&255==i.data[t+2]){let e,i;h++,e=n[2]+(s[2]+-avgL),e*=.85*n[2],e=(e+n[2])/2,r+=e,i=n[1]-n[1]*(.6*n[2]),i=(n[1]+i)/2;let o=hslToRgb(n[0],i,e);a.data[t]=o[0],a.data[t+1]=o[1],a.data[t+2]=o[2]}}ctx.putImageData(a,0,0),console.log("selectedHsl[1]: "+n[1]+" selectedHsl[2]: "+n[2]),console.log("highest saturation: "+(n[1]-n[1]*(.6*n[2]))),console.log("Lightness value:  "+r/h)}canvasClicked(t){}loadImageData(t,e){const a=new Image;a.onload=()=>{let t=this._getImageTransform(a.width,a.height);a.width=t.width,a.height=t.height,e({img:a,transform:t})},a.src=t}_getImageTransform(t,e){let a=0,s=0,i=t,n=e,r=i/n;return r>this._canvas.width/this._canvas.height?(i=this._canvas.width,n=i/r,a=0,s=(this._canvas.height-n)/2):(n=this._canvas.height,i=n*r,s=0,a=(this._canvas.width-i)/2),{width:i,height:n,x:a,y:s}}_setupListeners(){this._canvas.addEventListener("click",t=>{canvasClicked(t)}),window.addEventListener("orientationChange",t=>{this.resizeCanvas()})}getImageData(){this._ctx.getImageData(0,0,this._canvas.width,this._canvas.height)}},n=new class{constructor(){this.layers={imgLayer:null,edgeLayer:null,colorLayer:null}}getLayer(){return this.layers}addImgLayer(t){this.layers.imgLayer=t,this.layers.edgeLayer=null,this.layers.colorLayer=null}addEdgeLayer(t){this.layers.edgeLayer=t}addColorLayer(t){this.layers.colorLayer=t}};n.addImgLayer(new class{constructor(t,e){this._canvasController=e,this._loadImageData(t,t=>{this._imgData=t.img,this._imgTransform=t.transform})}getImgData(){return console.log(this._imgData),this._imgData}getImgTransform(){return console.log(this._imgTransform),this._imgTransform}_loadImageData(t,e){const a=new Image;let s;return a.onload=()=>{let t=this._getImageTransform(a.width,a.height);a.width=t.width,a.height=t.height,s={img:a,transform:t},e(s)},a.src=t,s}_getImageTransform(t,e){let a=this._canvasController.getCanvas(),s=0,i=0,n=t,r=e,h=n/r;return h>a.width/a.height?(n=a.width,r=n/h,s=0,i=(a.height-r)/2):(r=a.height,n=r*h,i=0,s=(a.width-n)/2),{width:n,height:r,x:s,y:i}}}("../img/img1.jpg",i)),i.drawImage(n.getLayer().imgLayer)}]);